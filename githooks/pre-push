#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

rootDir="../../"
remote="$1"
url="$2"

# First, stash index and work dir, keeping only the
# to-be-committed changes in the working directory.
old_stash=$(git rev-parse -q --verify refs/stash)
git stash save -q --keep-index
new_stash=$(git rev-parse -q --verify refs/stash)
if [[ "$old_stash" != "$new_stash" ]]; then
  echo "* Stashing your uncomitted changes, they will be reapplied at the end of this hook"
fi

echo "* Attempting build to verify changes compile..."

./run.sh build
result=$?
echo ""
if [ "$result" -eq "0" ]; then
  echo "Build successful!"
else
  echo "Build failed. Please fix build errors and try again."
fi

# Restore changes
if [[ "$old_stash" != "$new_stash" ]]; then
  echo "* Restoring your uncomitted changes."
  git reset --hard -q && git stash apply --index -q && git stash drop -q
  sleep 1
fi

exit $result
